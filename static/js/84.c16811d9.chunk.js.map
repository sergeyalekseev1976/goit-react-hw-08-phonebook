{"version":3,"file":"static/js/84.c16811d9.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/Modal/Modal.styled.jsx","components/Modal/Modal.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactListItem/ContactListItem.styled.jsx","components/EditForm/EditForm.styled.jsx","components/EditForm/EditForm.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/ContactsBar/ContactsBar.styled.jsx","components/ContactsBar/ContactsBar.jsx","components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","pages/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(\n      contact =>\n        contact.name.toLowerCase().includes(normalizedFilter) ||\n        contact.number.includes(normalizedFilter)\n    );\n  }\n);","import styled from '@emotion/styled';\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.4);\n`;\n\nexport const ModalContent = styled.div`\n  position: relative;\n`;\n\nexport const CloseBtn = styled.button`\n  position: absolute;\n  top: 5px;\n  right: 10px;\n  padding: 10px;\n  background-color: transparent;\n  cursor: pointer;\n  color: #8f9eb2;\n  border: none;\n  border-radius: 50px;\n  transition: color 300ms ease-in-out;\n  &:hover,\n  &:focus {\n    color: rgba(100, 135, 239, 0.8);\n  }\n`;","import { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\n// import PropTypes from 'prop-types';\nimport { Overlay, ModalContent, CloseBtn } from './Modal.styled';\nimport { BsXLg } from 'react-icons/bs';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport const Modal = ({ onClose, children }) => {\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.code === 'Escape') {\n        onClose();\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [onClose]);\n\n  const handleBackdropClick = e => {\n    if (e.currentTarget === e.target) {\n      onClose();\n    }\n  };\n\n  return createPortal(\n    <Overlay onClick={handleBackdropClick}>\n      <ModalContent className=\"modalContent\">\n        <CloseBtn onClick={onClose}>\n          <BsXLg />\n        </CloseBtn>\n        {children}\n      </ModalContent>\n    </Overlay>,\n    modalRoot\n  );\n};\n\n// Modal.propTypes = {\n//   onClose: PropTypes.func.isRequired,\n//   children: PropTypes.node.isRequired,\n// };","import styled from '@emotion/styled';\n\nexport const FormWrap = styled.div`\n  background-color: ${props => props.theme.secondaryBgCl};\n  border-radius: ${props => props.theme.borderRadius};\n  padding: 30px;\n  @media (min-width: 320px) {\n    width: 300px;\n  }\n  @media (min-width: 768px) {\n    width: 320px;\n  }\n  > h2 {\n    text-align: center;\n    margin-bottom: 40px;\n  }\n`;\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 40px;\n`;\n\nexport const Label = styled.label`\n  position: relative;\n  color: #8f9eb2;\n  > input {\n    width: 100%;\n    border: none;\n    border-bottom: 1px solid #8f9eb2;\n    padding: 8px 4px;\n    background-color: transparent;\n    outline: transparent;\n    color: #8f9eb2;\n    transition: border-color 300ms ease-in-out;\n    &:focus,\n    &:not(:placeholder-shown) {\n      border-color: #fff;\n    }\n    &::placeholder {\n      color: transparent;\n      transition: color 300ms ease-in-out;\n    }\n    &:focus::placeholder {\n      color: #8f9eb2;\n    }\n    &:focus + span,\n    &:not(:placeholder-shown) + span {\n      color: #fff;\n      transform: translateY(-20px);\n    }\n  }\n  > span {\n    position: absolute;\n    top: 0;\n    left: 0;\n    font-size: 18px;\n    transform-origin: top left;\n    transition: transform 300ms ease-in-out, color 300ms ease-in-out;\n  }\n  > p {\n    position: absolute;\n    bottom: -15px;\n    left: 50%;\n    width: 300px;\n    transform: translateX(-50%);\n    font-size: 10px;\n    color: tomato;\n    text-align: center;\n  }\n`;\n\nexport const FormBtn = styled.button`\n  display: inline-flex;\n  justify-content: center;\n  margin: 0 auto;\n  padding: 8px 16px;\n  border-radius: ${props => props.theme.borderRadius};\n  border: 1px solid #8f9eb2;\n  background-color: transparent;\n  color: #8f9eb2;\n  font-weight: 500;\n  font-size: 16px;\n  transition: color 300ms ease-in-out, background-color 300ms ease-in-out;\n  &:hover {\n    border-color: #6487ef;\n    background-color: #6487ef;\n    color: #ddf2ff;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { Form, Label, FormBtn, FormWrap } from './ContactForm.styled';\nimport { BsPersonPlusFill } from 'react-icons/bs';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport toast from 'react-hot-toast';\n// import PropTypes from 'prop-types';\n\nconst schema = yup\n  .object({\n    name: yup\n      .string()\n      .min(3)\n      .max(12)\n      .required()\n      .trim()\n      .matches(\n        /^[a-zA-Z]+(([' -][a-zA-Z])?[a-zA-Z]*)*$/,\n        'Name may contain only letters, apostrophe, dash and spaces.'\n      ),\n    number: yup\n      .string()\n      .min(6)\n      .max(10)\n      .required()\n      .trim()\n      .matches(/^\\d+$/, 'Number must be only digits'),\n  })\n  .required();\n\nexport const ContactForm = ({ onClose }) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const {\n    register,\n    reset,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(schema),\n  });\n\n  const onSubmit = data => {\n    if (\n      contacts.find(\n        option => option.name.toLowerCase() === data.name.toLowerCase()\n      )\n    ) {\n      return toast.error(`${data.name} is already in contacts`);\n    }\n    dispatch(addContact(data));\n    reset();\n    onClose();\n  };\n\n  return (\n    <FormWrap>\n      <h2>Contact</h2>\n      <Form onSubmit={handleSubmit(onSubmit)} autoComplete=\"off\">\n        <Label>\n          <input {...register('name')} placeholder=\"Enter contact name\" />\n          <span>Name</span>\n          {errors.name && <p>{errors.name.message}</p>}\n        </Label>\n        <Label>\n          <input {...register('number')} placeholder=\"Enter contact number\" />\n          <span>Number</span>\n          {errors.number && <p>{errors.number.message}</p>}\n        </Label>\n        <FormBtn type=\"submit\">\n          <BsPersonPlusFill />\n          &nbsp; Add contact\n        </FormBtn>\n      </Form>\n    </FormWrap>\n  );\n};\n\n// ContactForm.propTypes = {\n//   onClose: PropTypes.func,\n// };","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  display: block;\n  margin: 30px auto;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  max-width: 400px;\n  text-align: center;\n  font-size: 18px;\n  font-weight: 500;\n  cursor: pointer;\n  background-color: #0afc0a;\n  border-radius: 20px;\n  `;\n\nexport const Input = styled.input`\n  display: block;\n  margin-top: 8px;\n  margin-right: auto;\n  margin-left: auto;\n  padding: 8px 10px;\n  width: 70%;\n  color: #000000;\n  background-color: transparent;\n  border: 1px solid #000000;\n  outline: none;\n  border-radius: 20px;\n  transition: border-color 300ms ease-in-out;\n  &::placeholder {\n    text-align: center;\n    color: #000000;\n  }\n  &:hover,\n  &:focus {\n    border-color: #ffffff;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filtersSlice';\nimport { Label, Input } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const onChangeFilter = e => {\n    dispatch(setFilter(e.target.value));\n  };\n  return (\n    <Label>\n      <span>Find contacts by name</span>\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"search\"\n        onChange={onChangeFilter}\n      />\n    </Label>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Item = styled.li`\n  display: flex;\n  align-items: center;\n  gap: 20px;\n  padding: 4px 16px;\n  background-color: #0afc0a;\n  border-radius: 20px;\n`;\n\nexport const TextWrapper = styled.div`\n  margin-right: auto;\n`;\n\nexport const ContactName = styled.span`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 8px;\n  font-size: 18px;\n  color: #000000;\n  font-weight: 500;\n`;\n\nexport const ContactNumber = styled.span`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 18px;\n  color: #000000;\n`;\n\nexport const ContactBtn = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 4px;\n  background-color: transparent;\n  cursor: pointer;\n  color: #000000;\n  border: none;\n  border-radius: 50px;\n  transition: color 300ms ease-in-out;\n  &:hover,\n  &:focus {\n    color: #ffffff;\n  }\n`;\n\nexport const Avatar = styled.p`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: #ffffff;\n  background-color: #0afc0a;\n  border-radius: 50px;\n  width: 40px;\n  height: 40px;\n  border: none;\n`;","import styled from '@emotion/styled';\n\nexport const FormWrap = styled.div`\n  background-color: ${props => props.theme.secondaryBgCl};\n  border-radius: 20px;\n  padding: 30px;\n  @media (min-width: 320px) {\n    width: 300px;\n  }\n  @media (min-width: 768px) {\n    width: 320px;\n  }\n  > h2 {\n    color: #8f9eb2;\n    text-align: center;\n    margin-bottom: 40px;\n  }\n`;\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 40px;\n`;\n\nexport const Label = styled.label`\n  position: relative;\n  color: #8f9eb2;\n  > input {\n    width: 100%;\n    border: none;\n    border-bottom: 1px solid #8f9eb2;\n    padding: 8px 4px;\n    background-color: transparent;\n    outline: transparent;\n    color: #8f9eb2;\n    transition: border-color 300ms ease-in-out;\n    &:focus,\n    &:not(:placeholder-shown) {\n      border-color: #fff;\n    }\n    &::placeholder {\n      color: transparent;\n      transition: color 300ms ease-in-out;\n    }\n    &:focus::placeholder {\n      color: #8f9eb2;\n    }\n    &:focus + span,\n    &:not(:placeholder-shown) + span {\n      color: #fff;\n      transform: translateY(-20px);\n    }\n  }\n  > span {\n    position: absolute;\n    top: 0;\n    left: 0;\n    font-size: 18px;\n    transform-origin: top left;\n    transition: transform 300ms ease-in-out, color 300ms ease-in-out;\n  }\n  > p {\n    position: absolute;\n    bottom: -15px;\n    left: 50%;\n    width: 300px;\n    transform: translateX(-50%);\n    font-size: 10px;\n    color: tomato;\n    text-align: center;\n  }\n`;\n\nexport const FormBtn = styled.button`\n  display: inline-flex;\n  justify-content: center;\n  margin: 0 auto;\n  padding: 8px 16px;\n  border-radius: ${props => props.theme.borderRadius};\n  border: 1px solid #8f9eb2;\n  background-color: transparent;\n  color: #8f9eb2;\n  font-weight: 500;\n  font-size: 16px;\n  transition: color 300ms ease-in-out, background-color 300ms ease-in-out;\n  &:hover {\n    border-color: #6487ef;\n    background-color: #6487ef;\n    color: #ddf2ff;\n  }\n`;","import { useDispatch } from 'react-redux';\nimport { updateContact } from 'redux/contacts/operations';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { Form, Label, FormBtn, FormWrap } from './EditForm.styled';\nimport toast from 'react-hot-toast';\n// import PropTypes from 'prop-types';\n\nconst schema = yup\n  .object({\n    name: yup\n      .string()\n      .min(3)\n      .max(12)\n      .required()\n      .trim()\n      .matches(\n        /^[a-zA-Z]+(([' -][a-zA-Z ])?[a-zA-Z]*)*$/,\n        'Name may contain only letters, apostrophe, dash and spaces.'\n      ),\n    number: yup\n      .string()\n      .min(6)\n      .max(10)\n      .required()\n      .trim()\n      .matches(/^\\d+$/, 'Number must be only digits'),\n  })\n  .required();\n\nexport const EditForm = ({ id, name, number, onClose }) => {\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: {\n      name,\n      number,\n    },\n  });\n\n  const onSubmit = data => {\n    if (name === data.name && number === data.number) {\n      return toast.error(`contact not changed`);\n    }\n    dispatch(updateContact({ id, ...data }));\n    onClose();\n  };\n\n  return (\n    <FormWrap>\n      <h2>Edit contact</h2>\n      <Form onSubmit={handleSubmit(onSubmit)} autoComplete=\"off\">\n        <Label>\n          <input {...register('name')} placeholder=\"Enter contact name\" />\n          <span>Name</span>\n          {errors.name && <p>{errors.name.message}</p>}\n        </Label>\n        <Label>\n          <input {...register('number')} placeholder=\"Enter contact number\" />\n          <span>Number</span>\n          {errors.number && <p>{errors.number.message}</p>}\n        </Label>\n        <FormBtn type=\"submit\">Save</FormBtn>\n      </Form>\n    </FormWrap>\n  );\n};\n\n// EditForm.propTypes = {\n//   id: PropTypes.string.isRequired,\n//   name: PropTypes.string.isRequired,\n//   number: PropTypes.string.isRequired,\n//   onClose: PropTypes.func,\n// };","import { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { Modal } from 'components/Modal/Modal';\n// import PropTypes from 'prop-types';\nimport {\n  Item,\n  ContactName,\n  ContactNumber,\n  ContactBtn,\n  Avatar,\n  TextWrapper,\n} from './ContactListItem.styled';\nimport {\n  BsPersonFill,\n  BsXLg,\n  BsFillTelephoneFill,\n  BsFillPencilFill,\n} from 'react-icons/bs';\nimport { EditForm } from 'components/EditForm/EditForm';\n\nexport const ContactListItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(id));\n  const [showModal, setShowModal] = useState(false);\n\n  const toggleModal = () => setShowModal(prevState => !prevState);\n\n  return (\n    <>\n      <Item>\n        <Avatar>{name.slice(0, 1).toUpperCase()}</Avatar>\n        <TextWrapper>\n          <ContactName>\n            <BsPersonFill />\n            {name}\n          </ContactName>\n          <ContactNumber>\n            <BsFillTelephoneFill size=\"14\" />\n            {number.replace(/\\d{2}(?=.)/g, '$&-')}\n          </ContactNumber>\n        </TextWrapper>\n        <ContactBtn onClick={toggleModal}>\n          <BsFillPencilFill />\n        </ContactBtn>\n        <ContactBtn onClick={handleDelete}>\n          <BsXLg />\n        </ContactBtn>\n      </Item>\n      {showModal && (\n        <Modal onClose={toggleModal}>\n          <EditForm onClose={toggleModal} id={id} name={name} number={number} />\n        </Modal>\n      )}\n    </>\n  );\n};\n\n// ContactListItem.propTypes = {\n//   id: PropTypes.string.isRequired,\n//   name: PropTypes.string.isRequired,\n//   number: PropTypes.string.isRequired,\n// };\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  margin: 0 auto;\n  padding: 10px;\n  max-width: 400px;\n  border-radius: 20px;\n`;\n\nexport const Notice = styled.p`\n  display: inline-block;\n  padding: 4px 16px;\n  text-align: center;\n  font-size: 18px;\n  color: #000000;\n  background-color: #0afc0a;\n  border-radius: 20px;\n`;\n","import { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport { ContactListItem } from 'components/ContactListItem/ContactListItem';\nimport { List, Notice } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n\n  return (\n    <List>\n      {contacts.length === 0 ? (\n        <Notice>Contacts list is empty!</Notice>\n      ) : (\n        contacts.map(({ id, name, number }) => (\n          <ContactListItem key={id} id={id} name={name} number={number} />\n        ))\n      )}\n    </List>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  margin: 20px auto;\n  justify-content: space-between;\n  align-items: center;\n  max-width: 400px;\n`;\n\nexport const AddBtn = styled.button`\n  padding: 8px 16px;\n  border-radius: 20px;\n  border: 1px solid #000000;\n  background-color: #0afc0a;\n  color: #000000;\n  font-weight: 500;\n  font-size: 16px;\n  transition: color 300ms ease-in-out, background-color 300ms ease-in-out;\n  &:hover {\n    border-color: #000000;\n    background-color: #000000;\n    color: #ffffff;\n  }\n`;\n\nexport const Info = styled.p`\n  padding: 8px 16px;\n  border-radius: 20px;\n  border: 1px solid #000000;\n  background-color: #0afc0a;\n  color: #000000;\n  font-weight: 500;\n  font-size: 16px;\n  border: 1px solid #000000;\n`;","import { Wrapper, AddBtn, Info } from './ContactsBar.styled';\nimport { useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nexport const ContactsBar = ({ onOpen }) => {\n  const contacts = useSelector(selectContacts);\n\n  return (\n    <Wrapper>\n      <Info>All: {contacts.length}</Info>\n      <AddBtn onClick={onOpen}>Add +</AddBtn>\n    </Wrapper>\n  );\n};","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`;","import { Circles } from 'react-loader-spinner';\nimport { Wrapper } from './Loader.styled';\n\nexport function Loader() {\n  return (\n    <Wrapper>\n      <Circles\n      height=\"80\"\n      width=\"80\"\n      color=\"red\"\n      ariaLabel=\"circles-loading\"\n      wrapperStyle={{}}\n      wrapperClass=\"\"\n      visible={true}\n    />\n  </Wrapper>\n    \n  );\n}","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\nimport { Modal } from 'components/Modal/Modal';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Helmet } from 'react-helmet';\nimport { ContactsBar } from 'components/ContactsBar/ContactsBar';\nimport { Loader } from 'components/Loader/Loader';\n\nconst styles = {\n  container: {\n    minHeight: 'calc(100vh - 180px)',\n  },\n};\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const [showModal, setShowModal] = useState(false);\n\n  const toggleModal = () => setShowModal(prevState => !prevState);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div style={styles.container}>\n      <Helmet>\n        <title>Contacts</title>\n      </Helmet>\n      <Filter />\n\n      <ContactsBar onOpen={toggleModal} />\n      {isLoading && !error && <Loader />}\n      <ContactList />\n      {showModal && (\n        <Modal onClose={toggleModal}>\n          <ContactForm onClose={toggleModal} />\n        </Modal>\n      )}\n    </div>\n  );\n};\n\nexport default Contacts;"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","filter","normalizedFilter","toLowerCase","contact","name","includes","number","Overlay","styled","_templateObject","_taggedTemplateLiteral","ModalContent","_templateObject2","CloseBtn","_templateObject3","modalRoot","document","querySelector","Modal","_ref","onClose","children","useEffect","handleKeyDown","e","code","window","addEventListener","removeEventListener","createPortal","_jsx","onClick","currentTarget","target","_jsxs","className","BsXLg","FormWrap","props","theme","secondaryBgCl","borderRadius","Form","Label","FormBtn","_templateObject4","schema","yup","min","max","required","trim","matches","ContactForm","dispatch","useDispatch","useSelector","_useForm","useForm","resolver","yupResolver","register","reset","handleSubmit","errors","formState","onSubmit","data","find","option","toast","concat","addContact","autoComplete","_objectSpread","placeholder","message","type","BsPersonPlusFill","Input","Filter","onChange","setFilter","value","Item","TextWrapper","ContactName","ContactNumber","ContactBtn","_templateObject5","Avatar","_templateObject6","EditForm","id","defaultValues","updateContact","ContactListItem","_useState","useState","_useState2","_slicedToArray","showModal","setShowModal","toggleModal","prevState","_Fragment","slice","toUpperCase","BsPersonFill","BsFillTelephoneFill","size","replace","BsFillPencilFill","deleteContact","List","Notice","ContactList","length","map","Wrapper","AddBtn","Info","ContactsBar","onOpen","Loader","Circles","height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","styles","container","minHeight","fetchContacts","style","Helmet"],"sourceRoot":""}